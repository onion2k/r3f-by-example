{"version":3,"sources":["index.js"],"names":["Sun","forwardRef","props","useFrame","clock","current","position","x","Math","sin","getElapsedTime","ref","args","color","Effects","sunRef","useResource","multisampling","sun","blendFunction","BlendFunction","Screen","samples","density","decay","weight","exposure","clampMax","width","Resizer","AUTO_SIZE","height","kernelSize","KernelSize","SMALL","blur","render","style","camera","onCreated","gl","setClearColor","THREE","font","scale","anchorX","anchorY","document","querySelector"],"mappings":"+GAAA,8EASA,MAAMA,EAAMC,sBAAW,SAAaC,EAAOD,GAMzC,OALAE,aAAS,EAAGC,YACVH,EAAWI,QAAQC,SAASC,GACgB,GAA1CC,KAAKC,IAA6B,GAAzBL,EAAMM,qBAIjB,uBAAMC,IAAKV,EAAYK,SAAU,CAAC,GAAI,KAAO,IAA7C,UACE,gCAAgBM,KAAM,CAAC,EAAG,GAAI,MAC9B,mCAAmBC,MAAO,kBAKhC,SAASC,IACP,MAAMC,EAASC,cACf,OACE,qCACE,cAAChB,EAAD,CAAKW,IAAKI,IACTA,EAAOV,SACN,cAAC,IAAD,CAAgBY,cAAe,EAA/B,SACE,cAAC,IAAD,CACEC,IAAKH,EAAOV,QACZc,cAAeC,IAAcC,OAC7BC,QAAS,GACTC,QAAS,IACTC,MAAO,IACPC,OAAQ,GACRC,SAAU,GACVC,SAAU,EACVC,MAAOC,IAAQC,UACfC,OAAQF,IAAQC,UAChBE,WAAYC,IAAWC,MACvBC,MAAM,SAQlBC,iBACE,eAAC,IAAD,CACEC,MAAO,CAAEN,OAAQ,IAAKH,MAAO,KAC7BU,OAAQ,CAAEhC,SAAU,CAAC,EAAG,EAAG,KAC3BiC,UAAW,EAAGC,SACZA,EAAGC,cAAc,IAAIC,QAAY,aAJrC,UAOE,cAAC,IAAD,CACEC,KACE,iIAEFC,MAAO,CAAC,GAAI,GAAI,IAChB/B,MAAM,UACNgC,QAAQ,SACRC,QAAQ,SAPV,0CAWA,cAAChC,EAAD,OAEFiC,SAASC,cAAc,yB","file":"static/js/main.d720395a.chunk.js","sourcesContent":["import * as THREE from \"three\";\nimport React, { forwardRef } from \"react\";\nimport { render } from \"react-dom\";\nimport { Canvas, useFrame, useResource } from \"react-three-fiber\";\nimport { EffectComposer, GodRays } from \"@react-three/postprocessing\";\nimport { BlendFunction, Resizer, KernelSize } from \"postprocessing\";\nimport { Text } from \"@react-three/drei/Text\";\nimport \"./styles.css\";\n\nconst Sun = forwardRef(function Sun(props, forwardRef) {\n  useFrame(({ clock }) => {\n    forwardRef.current.position.x =\n      Math.sin(clock.getElapsedTime() * 0.1) * -50;\n  });\n\n  return (\n    <mesh ref={forwardRef} position={[0, -0.75, -10]}>\n      <sphereGeometry args={[1, 36, 36]} />\n      <meshBasicMaterial color={\"#FFFF00\"} />\n    </mesh>\n  );\n});\n\nfunction Effects() {\n  const sunRef = useResource();\n  return (\n    <>\n      <Sun ref={sunRef} />\n      {sunRef.current && (\n        <EffectComposer multisampling={0}>\n          <GodRays\n            sun={sunRef.current}\n            blendFunction={BlendFunction.Screen}\n            samples={60}\n            density={0.97}\n            decay={0.97}\n            weight={0.5}\n            exposure={0.8}\n            clampMax={1}\n            width={Resizer.AUTO_SIZE}\n            height={Resizer.AUTO_SIZE}\n            kernelSize={KernelSize.SMALL}\n            blur={true}\n          />\n        </EffectComposer>\n      )}\n    </>\n  );\n}\n\nrender(\n  <Canvas\n    style={{ height: 300, width: 1000 }}\n    camera={{ position: [0, 0, 10] }}\n    onCreated={({ gl }) => {\n      gl.setClearColor(new THREE.Color(\"#000000\"));\n    }}\n  >\n    <Text\n      font={\n        \"https://rawcdn.githack.com/google/fonts/3b179b729ac3306ab2a249d848d94ff08b90a0af/apache/robotoslab/static/RobotoSlab-Black.ttf\"\n      }\n      scale={[35, 35, 35]}\n      color=\"#FFFFFF\" // default\n      anchorX=\"center\" // default\n      anchorY=\"middle\" // default\n    >\n      react-three-fiber by example\n    </Text>\n    <Effects />\n  </Canvas>,\n  document.querySelector(\"section.page-header\")\n);\n"],"sourceRoot":""}